//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataServer
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.totvs.com/", ConfigurationName="DataServer.IRMSServer")]
    public interface IRMSServer
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.totvs.com/IRMSServer/Implements", ReplyAction="http://www.totvs.com/IRMSServer/ImplementsResponse")]
        System.Threading.Tasks.Task<bool> ImplementsAsync(System.Type type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.totvs.com/IRMSServer/CheckServiceActivity", ReplyAction="http://www.totvs.com/IRMSServer/CheckServiceActivityResponse")]
        System.Threading.Tasks.Task<bool> CheckServiceActivityAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    public interface IRMSServerChannel : DataServer.IRMSServer, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    public partial class RMSServerClient : System.ServiceModel.ClientBase<DataServer.IRMSServer>, DataServer.IRMSServer
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public RMSServerClient() : 
                base(RMSServerClient.GetDefaultBinding(), RMSServerClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.RM_IRMSServer.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RMSServerClient(EndpointConfiguration endpointConfiguration) : 
                base(RMSServerClient.GetBindingForEndpoint(endpointConfiguration), RMSServerClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RMSServerClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(RMSServerClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RMSServerClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(RMSServerClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RMSServerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<bool> ImplementsAsync(System.Type type)
        {
            return base.Channel.ImplementsAsync(type);
        }
        
        public System.Threading.Tasks.Task<bool> CheckServiceActivityAsync()
        {
            return base.Channel.CheckServiceActivityAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.RM_IRMSServer))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.RM_IRMSServer))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8053/wsDataServer/IRMSServer");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return RMSServerClient.GetBindingForEndpoint(EndpointConfiguration.RM_IRMSServer);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return RMSServerClient.GetEndpointAddress(EndpointConfiguration.RM_IRMSServer);
        }
        
        public enum EndpointConfiguration
        {
            
            RM_IRMSServer,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.totvs.com/", ConfigurationName="DataServer.IwsBase")]
    public interface IwsBase
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.totvs.com/IRMSServer/Implements", ReplyAction="http://www.totvs.com/IRMSServer/ImplementsResponse")]
        System.Threading.Tasks.Task<bool> ImplementsAsync(System.Type type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.totvs.com/IRMSServer/CheckServiceActivity", ReplyAction="http://www.totvs.com/IRMSServer/CheckServiceActivityResponse")]
        System.Threading.Tasks.Task<bool> CheckServiceActivityAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.totvs.com/IwsBase/AutenticaAcesso", ReplyAction="http://www.totvs.com/IwsBase/AutenticaAcessoResponse")]
        System.Threading.Tasks.Task<string> AutenticaAcessoAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    public interface IwsBaseChannel : DataServer.IwsBase, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    public partial class IwsBaseClient : System.ServiceModel.ClientBase<DataServer.IwsBase>, DataServer.IwsBase
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public IwsBaseClient() : 
                base(IwsBaseClient.GetDefaultBinding(), IwsBaseClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.RM_IwsBase.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public IwsBaseClient(EndpointConfiguration endpointConfiguration) : 
                base(IwsBaseClient.GetBindingForEndpoint(endpointConfiguration), IwsBaseClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public IwsBaseClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(IwsBaseClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public IwsBaseClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(IwsBaseClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public IwsBaseClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<bool> ImplementsAsync(System.Type type)
        {
            return base.Channel.ImplementsAsync(type);
        }
        
        public System.Threading.Tasks.Task<bool> CheckServiceActivityAsync()
        {
            return base.Channel.CheckServiceActivityAsync();
        }
        
        public System.Threading.Tasks.Task<string> AutenticaAcessoAsync()
        {
            return base.Channel.AutenticaAcessoAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.RM_IwsBase))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.RM_IwsBase))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8053/wsDataServer/IwsBase");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return IwsBaseClient.GetBindingForEndpoint(EndpointConfiguration.RM_IwsBase);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return IwsBaseClient.GetEndpointAddress(EndpointConfiguration.RM_IwsBase);
        }
        
        public enum EndpointConfiguration
        {
            
            RM_IwsBase,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.totvs.com/", ConfigurationName="DataServer.IwsDataServer")]
    public interface IwsDataServer
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.totvs.com/IRMSServer/Implements", ReplyAction="http://www.totvs.com/IRMSServer/ImplementsResponse")]
        System.Threading.Tasks.Task<bool> ImplementsAsync(System.Type type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.totvs.com/IRMSServer/CheckServiceActivity", ReplyAction="http://www.totvs.com/IRMSServer/CheckServiceActivityResponse")]
        System.Threading.Tasks.Task<bool> CheckServiceActivityAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.totvs.com/IwsDataServer/GetSchema", ReplyAction="http://www.totvs.com/IwsDataServer/GetSchemaResponse")]
        System.Threading.Tasks.Task<string> GetSchemaAsync(string DataServerName, string Contexto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.totvs.com/IwsDataServer/IsValidDataServer", ReplyAction="http://www.totvs.com/IwsDataServer/IsValidDataServerResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Reflection.MemberInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Type))]
        System.Threading.Tasks.Task<object> IsValidDataServerAsync(string DataServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.totvs.com/IwsDataServer/GetSchemaEmail", ReplyAction="http://www.totvs.com/IwsDataServer/GetSchemaEmailResponse")]
        System.Threading.Tasks.Task<string> GetSchemaEmailAsync(string DataServerName, string Contexto, string EmailUsuarioContexto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.totvs.com/IwsDataServer/ReadView", ReplyAction="http://www.totvs.com/IwsDataServer/ReadViewResponse")]
        System.Threading.Tasks.Task<string> ReadViewAsync(string DataServerName, string Filtro, string Contexto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.totvs.com/IwsDataServer/ReadViewEmail", ReplyAction="http://www.totvs.com/IwsDataServer/ReadViewEmailResponse")]
        System.Threading.Tasks.Task<string> ReadViewEmailAsync(string DataServerName, string Filtro, string Contexto, string EmailUsuarioContexto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.totvs.com/IwsDataServer/ReadRecord", ReplyAction="http://www.totvs.com/IwsDataServer/ReadRecordResponse")]
        System.Threading.Tasks.Task<string> ReadRecordAsync(string DataServerName, string PrimaryKey, string Contexto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.totvs.com/IwsDataServer/ReadRecordEmail", ReplyAction="http://www.totvs.com/IwsDataServer/ReadRecordEmailResponse")]
        System.Threading.Tasks.Task<string> ReadRecordEmailAsync(string DataServerName, string PrimaryKey, string Contexto, string EmailUsuarioContexto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.totvs.com/IwsDataServer/SaveRecord", ReplyAction="http://www.totvs.com/IwsDataServer/SaveRecordResponse")]
        System.Threading.Tasks.Task<string> SaveRecordAsync(string DataServerName, string XML, string Contexto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.totvs.com/IwsDataServer/SaveRecordEmail", ReplyAction="http://www.totvs.com/IwsDataServer/SaveRecordEmailResponse")]
        System.Threading.Tasks.Task<string> SaveRecordEmailAsync(string DataServerName, string XML, string Contexto, string EmailUsuarioContexto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.totvs.com/IwsDataServer/DeleteRecord", ReplyAction="http://www.totvs.com/IwsDataServer/DeleteRecordResponse")]
        System.Threading.Tasks.Task<string> DeleteRecordAsync(string DataServerName, string XML, string Contexto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.totvs.com/IwsDataServer/DeleteRecordEmail", ReplyAction="http://www.totvs.com/IwsDataServer/DeleteRecordEmailResponse")]
        System.Threading.Tasks.Task<string> DeleteRecordEmailAsync(string DataServerName, string XML, string Contexto, string EmailUsuarioContexto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.totvs.com/IwsDataServer/DeleteRecordByKey", ReplyAction="http://www.totvs.com/IwsDataServer/DeleteRecordByKeyResponse")]
        System.Threading.Tasks.Task<string> DeleteRecordByKeyAsync(string DataServerName, string PrimaryKey, string Contexto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.totvs.com/IwsDataServer/ReadLookupView", ReplyAction="http://www.totvs.com/IwsDataServer/ReadLookupViewResponse")]
        System.Threading.Tasks.Task<string> ReadLookupViewAsync(string DataServerName, string Filtro, string Contexto, string OwnerData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.totvs.com/IwsDataServer/ReadLookupViewEmail", ReplyAction="http://www.totvs.com/IwsDataServer/ReadLookupViewEmailResponse")]
        System.Threading.Tasks.Task<string> ReadLookupViewEmailAsync(string DataServerName, string Filtro, string Contexto, string OwnerData, string EmailUsuarioContexto);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    public interface IwsDataServerChannel : DataServer.IwsDataServer, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    public partial class IwsDataServerClient : System.ServiceModel.ClientBase<DataServer.IwsDataServer>, DataServer.IwsDataServer
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public IwsDataServerClient() : 
                base(IwsDataServerClient.GetDefaultBinding(), IwsDataServerClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.RM_IwsDataServer.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public IwsDataServerClient(EndpointConfiguration endpointConfiguration) : 
                base(IwsDataServerClient.GetBindingForEndpoint(endpointConfiguration), IwsDataServerClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public IwsDataServerClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(IwsDataServerClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public IwsDataServerClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(IwsDataServerClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public IwsDataServerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<bool> ImplementsAsync(System.Type type)
        {
            return base.Channel.ImplementsAsync(type);
        }
        
        public System.Threading.Tasks.Task<bool> CheckServiceActivityAsync()
        {
            return base.Channel.CheckServiceActivityAsync();
        }
        
        public System.Threading.Tasks.Task<string> GetSchemaAsync(string DataServerName, string Contexto)
        {
            return base.Channel.GetSchemaAsync(DataServerName, Contexto);
        }
        
        public System.Threading.Tasks.Task<object> IsValidDataServerAsync(string DataServerName)
        {
            return base.Channel.IsValidDataServerAsync(DataServerName);
        }
        
        public System.Threading.Tasks.Task<string> GetSchemaEmailAsync(string DataServerName, string Contexto, string EmailUsuarioContexto)
        {
            return base.Channel.GetSchemaEmailAsync(DataServerName, Contexto, EmailUsuarioContexto);
        }
        
        public System.Threading.Tasks.Task<string> ReadViewAsync(string DataServerName, string Filtro, string Contexto)
        {
            return base.Channel.ReadViewAsync(DataServerName, Filtro, Contexto);
        }
        
        public System.Threading.Tasks.Task<string> ReadViewEmailAsync(string DataServerName, string Filtro, string Contexto, string EmailUsuarioContexto)
        {
            return base.Channel.ReadViewEmailAsync(DataServerName, Filtro, Contexto, EmailUsuarioContexto);
        }
        
        public System.Threading.Tasks.Task<string> ReadRecordAsync(string DataServerName, string PrimaryKey, string Contexto)
        {
            return base.Channel.ReadRecordAsync(DataServerName, PrimaryKey, Contexto);
        }
        
        public System.Threading.Tasks.Task<string> ReadRecordEmailAsync(string DataServerName, string PrimaryKey, string Contexto, string EmailUsuarioContexto)
        {
            return base.Channel.ReadRecordEmailAsync(DataServerName, PrimaryKey, Contexto, EmailUsuarioContexto);
        }
        
        public System.Threading.Tasks.Task<string> SaveRecordAsync(string DataServerName, string XML, string Contexto)
        {
            return base.Channel.SaveRecordAsync(DataServerName, XML, Contexto);
        }
        
        public System.Threading.Tasks.Task<string> SaveRecordEmailAsync(string DataServerName, string XML, string Contexto, string EmailUsuarioContexto)
        {
            return base.Channel.SaveRecordEmailAsync(DataServerName, XML, Contexto, EmailUsuarioContexto);
        }
        
        public System.Threading.Tasks.Task<string> DeleteRecordAsync(string DataServerName, string XML, string Contexto)
        {
            return base.Channel.DeleteRecordAsync(DataServerName, XML, Contexto);
        }
        
        public System.Threading.Tasks.Task<string> DeleteRecordEmailAsync(string DataServerName, string XML, string Contexto, string EmailUsuarioContexto)
        {
            return base.Channel.DeleteRecordEmailAsync(DataServerName, XML, Contexto, EmailUsuarioContexto);
        }
        
        public System.Threading.Tasks.Task<string> DeleteRecordByKeyAsync(string DataServerName, string PrimaryKey, string Contexto)
        {
            return base.Channel.DeleteRecordByKeyAsync(DataServerName, PrimaryKey, Contexto);
        }
        
        public System.Threading.Tasks.Task<string> ReadLookupViewAsync(string DataServerName, string Filtro, string Contexto, string OwnerData)
        {
            return base.Channel.ReadLookupViewAsync(DataServerName, Filtro, Contexto, OwnerData);
        }
        
        public System.Threading.Tasks.Task<string> ReadLookupViewEmailAsync(string DataServerName, string Filtro, string Contexto, string OwnerData, string EmailUsuarioContexto)
        {
            return base.Channel.ReadLookupViewEmailAsync(DataServerName, Filtro, Contexto, OwnerData, EmailUsuarioContexto);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.RM_IwsDataServer))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.RM_IwsDataServer))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8053/wsDataServer/IwsDataServer");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return IwsDataServerClient.GetBindingForEndpoint(EndpointConfiguration.RM_IwsDataServer);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return IwsDataServerClient.GetEndpointAddress(EndpointConfiguration.RM_IwsDataServer);
        }
        
        public enum EndpointConfiguration
        {
            
            RM_IwsDataServer,
        }
    }
}
